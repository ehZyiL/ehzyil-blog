server:
  # 端口
  port: 8080
spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  # 应用名称
  application:
    name: BlogApplication
  # mysql配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.18.128:3306/blog?serverTimezone=Asia/Shanghai&allowMultiQueries=true&rewriteBatchedStatements=true
    username: root
    password: root
    druid:
      # 初始连接数
      initial-size: 10
      # 最小连接池数量
      min-idle: 10
      # 最大连接池数量
      max-active: 150
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 600000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 900000
      # 配置检测连接是否有效
      validation-query: SELECT 1 FROM DUAL
      # 配置检测连接是否有效时间
      validation-query-timeout: 500
      # 在获取连接后，确定是否要进行连接空间时间的检查
      test-while-idle: true
      # 设置从连接池获取连接时是否检查连接有效性，true检查，false不检查
      test-on-borrow: false
      # 设置从连接池归还连接时是否检查连接有效性，true检查，false不检查
      test-on-return: false
  # 文件上传限制
  servlet:
    multipart:
      max-request-size: 100MB
      max-file-size: 100MB

  # redis配置
  redis:
    # Redis服务器地址
    host: 192.168.18.128
    # Redis服务器连接端口
    port: 6379
    # Redis服务器连接密码（默认为空）
    password: 666666
    # 连接超时时间
    timeout: 10s
    lettuce:
      pool:
        # 连接池最大连接数
        max-active: 150
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: 5000ms
        # 连接池中的最大空闲连接
        max-idle: 100
        # 连接池中的最小空闲连接
        min-idle: 50
  # 邮箱配置
  mail:
    host: smtp.qq.com
    # 用户名
    username: 495028518@qq.com
    # 授权码
    password: qvckkhuwmqyycaci
# mybatisPlus配置
mybatis-plus:
  # mapper映射地址
  mapper-locations: classpath:mapper/*.xml
  # 实体类扫描包路径
  type-aliases-package: com.ehzyil.domain
  configuration:
    # sql打印
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 开启驼峰命名
    map-underscore-to-camel-case: true
  global-config:
    db-config:
      # 数据库表前缀
      table-prefix: t_

# 线程池配置
thread:
  pool:
    core-pool-size: 5
    max-pool-size: 10
    queue-capacity: 50
    keep-alive-seconds: 60

# 文件上传策略 local、oss、cos
upload:
  strategy: qiniu
  local:
    # nginx映射本地文件路径
    url: https://localhost/
    # 本地文件存储路径
    path: /usr/local/upload/
  # oss存储
  oss:
    url: http://Bucket域名/
    endpoint: OSS配置endpoint
    bucketName: OSS配置bucketName
    accessKeyId: OSS配置accessKeyId
    accesskeySecret: OSS配置accesskeySecret
  # cos存储
  cos:
    url: https://Bucket域名/
    secretId: COS配置secretId
    secretKey: COS配置secretKey
    region: COS配置region
    bucketName: COS配置bucketName
  # qiniu存储(七牛云)
  qiniu:
    url: http://s14jjz3r5.hb-bkt.clouddn.com/  # 访问域名(给存储桶绑定的二级域名)
    bucketName: ehzyil-blog # 空间名称bucketName
    region: huabei # 存储区域 华南(huanan) 华北(huabei)...
    accessKey: CSOFmR7_70ThEOZqlgTdbe2HnvOjbjPdCHt8CZrb  #accessKey
    secretKey: _D-S6V1rBT2jjnZrX-Z_s30Aw6SNO1ydOFYHnUoC  #secretKey

# 第三方登录
oauth:
  gitee:
    client-id: Gitee的client-id
    client-secret: Gitee的client-secret
    grant_type: authorization_code
    redirect-url: Gitee回调地址
    access-token-url: https://gitee.com/oauth/token
    user-info-url: https://gitee.com/api/v5/user?access_token={access_token}
  github:
    client-id: Github的client-id
    client-secret: Github的client-secret
    redirect-url: Github回调地址
    access-token-url: https://github.com/login/oauth/access_token
    user-info-url: https://api.github.com/user
#  qq:
#    app-id: QQ的APPID
#    app-key: QQ的app_key
#    grant_type: authorization_code
#    redirect-url: QQ回调地址
#    access-token-url: https://graph.qq.com/oauth2.0/token
#    user-openid-url: https://graph.qq.com/oauth2.0/me?access_token={access_token}
#    user-info-url: https://graph.qq.com/user/get_user_info?openid={openid}&access_token={access_token}&oauth_consumer_key={oauth_consumer_key}
  qq:
    app-id: 1112254569
    app-secret: 1gh7JtzrJKOtdrNN
    grant_type: authorization_code
    redirect-url: QQ回调地址
    access-token-url: https://graph.qq.com/oauth2.0/token
    user-openid-url: https://graph.qq.com/oauth2.0/me?access_token={access_token}
    user-info-url: https://graph.qq.com/user/get_user_info?openid={openid}&access_token={access_token}&oauth_consumer_key={oauth_consumer_key}


# B站图片上传链接
bili-url: https://api.bilibili.com/x/dynamic/feed/draw/upload_bfs